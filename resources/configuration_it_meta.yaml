!!python/object:neurallog.structure_learning.structure_learning_method.IterativeStructureLearning

data_directory:
iteration_prefix:

output_directory:

logic_file_extension: .pl

load_pre_trained_parameter: false
examples_batch_size: 10

train_parameters_on_remaining_examples: false

engine_system_translator: !!python/object:neurallog.structure_learning.engine_system_translator.NeuralLogEngineSystemTranslator {}

theory_metrics:
  - !!python/object:neurallog.knowledge.theory.evaluation.metric.theory_metric.RocCurveMetric
      empty_default: false
  - !!python/object:neurallog.knowledge.theory.evaluation.metric.theory_metric.PrecisionRecallCurveMetric
      empty_default: false
  - !!python/object:neurallog.knowledge.theory.evaluation.metric.theory_metric.LikelihoodMetric {}
  - !!python/object:neurallog.knowledge.theory.evaluation.metric.theory_metric.LogLikelihoodMetric {}

revision_operator_selector: !!python/object:neurallog.knowledge.theory.manager.revision.revision_operator_selector.BestRevisionOperatorSelector {}

theory_evaluator: !!python/object:neurallog.knowledge.theory.evaluation.theory_evaluator.TheoryEvaluator {}

theory_revision_manager: !!python/object:neurallog.knowledge.theory.manager.theory_revision_manager.HoeffdingBoundTheoryManager
  theory_metric: &metric !!python/object:neurallog.knowledge.theory.evaluation.metric.theory_metric.PrecisionRecallCurveMetric {}
  delta: 1.0e-3
  delta_update_function: "lambda x: x * 0.5"
  train_using_all_examples: true

incoming_example_manager: !!python/object:neurallog.knowledge.manager.tree_manager.TreeExampleManager
  sample_selector: !!python/object:neurallog.knowledge.theory.manager.revision.sample_selector.IndependentSampleSelector {}
  tree_theory: &tree !!python/object:neurallog.knowledge.manager.tree_manager.TreeTheory
    initial_modifiers:
      - !!python/object:neurallog.knowledge.theory.manager.revision.clause_modifier.ClauseHeadPredicateModifier
        old_predicate: "(.+)"
        new_predicate: "_1"

revision_manager: !!python/object:neurallog.knowledge.theory.manager.revision.revision_manager.BestLeafRevisionManager
  tree_theory: *tree
  number_of_leaves_to_revise: -1
  revision_heuristic: !!python/object:neurallog.knowledge.theory.manager.revision.revision_manager.RepairableNodeHeuristic {}

revision_operator_evaluators:
  - !!python/object:neurallog.knowledge.theory.manager.revision.revision_operator_evaluator.RevisionOperatorEvaluator
    revision_operator: !!python/object:neurallog.knowledge.theory.manager.revision.operator.meta_revision_operator.MetaRevisionOperator
      theory_metric: *metric
      tree_theory: *tree
      maximum_depth: 0
      meta_program: |
        P(X, Y) :- true.    % removes a literal from the body
        P(X, Y) :- false.   % removes a clause
        P(X, Y) :- Q(X, Y). % adds or replace a literal from the body, closing
        P(X, Y) :- Q(X, Z). % adds or replace a literal from the body, opening
        # P(X, Y) :- Q(X, Z), R(Z, Y). % Chain
        # P(X, Y) :- Q(X, Z), P(Z, Y). % Tail
      clause_modifiers:
        - !!python/object:neurallog.knowledge.theory.manager.revision.clause_modifier.AppendLiteralModifier
          predicate: act_func
          term_index: -1
        - !!python/object:neurallog.knowledge.theory.manager.revision.clause_modifier.AppendLiteralWithUniqueTermModifier
          predicate: "w"
          term_prefix: "w_"
