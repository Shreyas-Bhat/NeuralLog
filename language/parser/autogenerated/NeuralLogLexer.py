# Generated from /Users/Victor/PycharmProjects/NeuralLog/language/parser/autogenerated/NeuralLog.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\31")
        buf.write("\u00c9\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\3\2\3\2\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3\5\3\5\3\6\3\6\3")
        buf.write("\6\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\n")
        buf.write("\5\nM\n\n\3\n\7\nP\n\n\f\n\16\nS\13\n\3\n\3\n\6\nW\n\n")
        buf.write("\r\n\16\nX\3\n\3\n\5\n]\n\n\3\n\6\n`\n\n\r\n\16\na\3\13")
        buf.write("\5\13e\n\13\3\13\7\13h\n\13\f\13\16\13k\13\13\3\13\3\13")
        buf.write("\6\13o\n\13\r\13\16\13p\3\f\5\ft\n\f\3\f\6\fw\n\f\r\f")
        buf.write("\16\fx\3\r\6\r|\n\r\r\r\16\r}\3\16\3\16\6\16\u0082\n\16")
        buf.write("\r\16\16\16\u0083\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3")
        buf.write("\21\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25")
        buf.write("\3\25\3\25\7\25\u009a\n\25\f\25\16\25\u009d\13\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\7\25\u00a4\n\25\f\25\16\25\u00a7")
        buf.write("\13\25\3\25\5\25\u00aa\n\25\3\26\6\26\u00ad\n\26\r\26")
        buf.write("\16\26\u00ae\3\26\3\26\3\27\3\27\7\27\u00b5\n\27\f\27")
        buf.write("\16\27\u00b8\13\27\3\27\3\27\3\30\3\30\3\30\3\30\7\30")
        buf.write("\u00c0\n\30\f\30\16\30\u00c3\13\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\u00c1\2\31\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n")
        buf.write("\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'")
        buf.write("\25)\26+\27-\30/\31\3\2\13\3\2\62;\4\2GGgg\4\2--//\7\2")
        buf.write("//\62;C\\aac|\3\2$$\3\2))\5\2\13\f\17\17\"\"\4\2%%\'\'")
        buf.write("\4\2\f\f\17\17\2\u00dc\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2")
        buf.write("\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2")
        buf.write("\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2")
        buf.write("\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!")
        buf.write("\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2")
        buf.write("\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\3\61\3\2\2\2\5\63\3")
        buf.write("\2\2\2\7\66\3\2\2\2\t8\3\2\2\2\13<\3\2\2\2\r?\3\2\2\2")
        buf.write("\17B\3\2\2\2\21G\3\2\2\2\23L\3\2\2\2\25d\3\2\2\2\27s\3")
        buf.write("\2\2\2\31{\3\2\2\2\33\177\3\2\2\2\35\u0087\3\2\2\2\37")
        buf.write("\u0089\3\2\2\2!\u008b\3\2\2\2#\u008d\3\2\2\2%\u008f\3")
        buf.write("\2\2\2\'\u0092\3\2\2\2)\u00a9\3\2\2\2+\u00ac\3\2\2\2-")
        buf.write("\u00b2\3\2\2\2/\u00bb\3\2\2\2\61\62\7}\2\2\62\4\3\2\2")
        buf.write("\2\63\64\7\60\2\2\64\65\7\60\2\2\65\6\3\2\2\2\66\67\7")
        buf.write("\177\2\2\67\b\3\2\2\289\7h\2\29:\7q\2\2:;\7t\2\2;\n\3")
        buf.write("\2\2\2<=\7k\2\2=>\7p\2\2>\f\3\2\2\2?@\7f\2\2@A\7q\2\2")
        buf.write("A\16\3\2\2\2BC\7f\2\2CD\7q\2\2DE\7p\2\2EF\7g\2\2F\20\3")
        buf.write("\2\2\2GH\7p\2\2HI\7q\2\2IJ\7v\2\2J\22\3\2\2\2KM\7/\2\2")
        buf.write("LK\3\2\2\2LM\3\2\2\2MQ\3\2\2\2NP\t\2\2\2ON\3\2\2\2PS\3")
        buf.write("\2\2\2QO\3\2\2\2QR\3\2\2\2RT\3\2\2\2SQ\3\2\2\2TV\7\60")
        buf.write("\2\2UW\t\2\2\2VU\3\2\2\2WX\3\2\2\2XV\3\2\2\2XY\3\2\2\2")
        buf.write("YZ\3\2\2\2Z\\\t\3\2\2[]\t\4\2\2\\[\3\2\2\2\\]\3\2\2\2")
        buf.write("]_\3\2\2\2^`\t\2\2\2_^\3\2\2\2`a\3\2\2\2a_\3\2\2\2ab\3")
        buf.write("\2\2\2b\24\3\2\2\2ce\7/\2\2dc\3\2\2\2de\3\2\2\2ei\3\2")
        buf.write("\2\2fh\t\2\2\2gf\3\2\2\2hk\3\2\2\2ig\3\2\2\2ij\3\2\2\2")
        buf.write("jl\3\2\2\2ki\3\2\2\2ln\7\60\2\2mo\t\2\2\2nm\3\2\2\2op")
        buf.write("\3\2\2\2pn\3\2\2\2pq\3\2\2\2q\26\3\2\2\2rt\7/\2\2sr\3")
        buf.write("\2\2\2st\3\2\2\2tv\3\2\2\2uw\t\2\2\2vu\3\2\2\2wx\3\2\2")
        buf.write("\2xv\3\2\2\2xy\3\2\2\2y\30\3\2\2\2z|\t\5\2\2{z\3\2\2\2")
        buf.write("|}\3\2\2\2}{\3\2\2\2}~\3\2\2\2~\32\3\2\2\2\177\u0081\7")
        buf.write("}\2\2\u0080\u0082\t\5\2\2\u0081\u0080\3\2\2\2\u0082\u0083")
        buf.write("\3\2\2\2\u0083\u0081\3\2\2\2\u0083\u0084\3\2\2\2\u0084")
        buf.write("\u0085\3\2\2\2\u0085\u0086\7\177\2\2\u0086\34\3\2\2\2")
        buf.write("\u0087\u0088\7*\2\2\u0088\36\3\2\2\2\u0089\u008a\7+\2")
        buf.write("\2\u008a \3\2\2\2\u008b\u008c\7.\2\2\u008c\"\3\2\2\2\u008d")
        buf.write("\u008e\7\60\2\2\u008e$\3\2\2\2\u008f\u0090\7<\2\2\u0090")
        buf.write("\u0091\7<\2\2\u0091&\3\2\2\2\u0092\u0093\7<\2\2\u0093")
        buf.write("\u0094\7/\2\2\u0094(\3\2\2\2\u0095\u009b\7$\2\2\u0096")
        buf.write("\u0097\7^\2\2\u0097\u009a\13\2\2\2\u0098\u009a\n\6\2\2")
        buf.write("\u0099\u0096\3\2\2\2\u0099\u0098\3\2\2\2\u009a\u009d\3")
        buf.write("\2\2\2\u009b\u0099\3\2\2\2\u009b\u009c\3\2\2\2\u009c\u009e")
        buf.write("\3\2\2\2\u009d\u009b\3\2\2\2\u009e\u00aa\7$\2\2\u009f")
        buf.write("\u00a5\7)\2\2\u00a0\u00a1\7^\2\2\u00a1\u00a4\13\2\2\2")
        buf.write("\u00a2\u00a4\n\7\2\2\u00a3\u00a0\3\2\2\2\u00a3\u00a2\3")
        buf.write("\2\2\2\u00a4\u00a7\3\2\2\2\u00a5\u00a3\3\2\2\2\u00a5\u00a6")
        buf.write("\3\2\2\2\u00a6\u00a8\3\2\2\2\u00a7\u00a5\3\2\2\2\u00a8")
        buf.write("\u00aa\7)\2\2\u00a9\u0095\3\2\2\2\u00a9\u009f\3\2\2\2")
        buf.write("\u00aa*\3\2\2\2\u00ab\u00ad\t\b\2\2\u00ac\u00ab\3\2\2")
        buf.write("\2\u00ad\u00ae\3\2\2\2\u00ae\u00ac\3\2\2\2\u00ae\u00af")
        buf.write("\3\2\2\2\u00af\u00b0\3\2\2\2\u00b0\u00b1\b\26\2\2\u00b1")
        buf.write(",\3\2\2\2\u00b2\u00b6\t\t\2\2\u00b3\u00b5\n\n\2\2\u00b4")
        buf.write("\u00b3\3\2\2\2\u00b5\u00b8\3\2\2\2\u00b6\u00b4\3\2\2\2")
        buf.write("\u00b6\u00b7\3\2\2\2\u00b7\u00b9\3\2\2\2\u00b8\u00b6\3")
        buf.write("\2\2\2\u00b9\u00ba\b\27\2\2\u00ba.\3\2\2\2\u00bb\u00bc")
        buf.write("\7\61\2\2\u00bc\u00bd\7,\2\2\u00bd\u00c1\3\2\2\2\u00be")
        buf.write("\u00c0\13\2\2\2\u00bf\u00be\3\2\2\2\u00c0\u00c3\3\2\2")
        buf.write("\2\u00c1\u00c2\3\2\2\2\u00c1\u00bf\3\2\2\2\u00c2\u00c4")
        buf.write("\3\2\2\2\u00c3\u00c1\3\2\2\2\u00c4\u00c5\7,\2\2\u00c5")
        buf.write("\u00c6\7\61\2\2\u00c6\u00c7\3\2\2\2\u00c7\u00c8\b\30\2")
        buf.write("\2\u00c8\60\3\2\2\2\27\2LQX\\adipsx}\u0083\u0099\u009b")
        buf.write("\u00a3\u00a5\u00a9\u00ae\u00b6\u00c1\3\b\2\2")
        return buf.getvalue()


class NeuralLogLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    FOR_LOOP = 4
    IN_TOKEN = 5
    DO_TOKEN = 6
    DONE_TOKEN = 7
    NEGATION = 8
    SCIENTIFIC_NUMBER = 9
    DECIMAL = 10
    INTEGER = 11
    TERM = 12
    PLACE_HOLDER = 13
    OPEN_ARGUMENTS = 14
    CLOSE_ARGUMENTS = 15
    ITEM_SEPARATOR = 16
    END_OF_CLAUSE = 17
    WEIGHT_SEPARATOR = 18
    IMPLICATION_SIGN = 19
    QUOTED = 20
    WHITESPACE = 21
    COMMENT = 22
    BLOCK_COMMENT = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'..'", "'}'", "'for'", "'in'", "'do'", "'done'", "'not'", 
            "'('", "')'", "','", "'.'", "'::'", "':-'" ]

    symbolicNames = [ "<INVALID>",
            "FOR_LOOP", "IN_TOKEN", "DO_TOKEN", "DONE_TOKEN", "NEGATION", 
            "SCIENTIFIC_NUMBER", "DECIMAL", "INTEGER", "TERM", "PLACE_HOLDER", 
            "OPEN_ARGUMENTS", "CLOSE_ARGUMENTS", "ITEM_SEPARATOR", "END_OF_CLAUSE", 
            "WEIGHT_SEPARATOR", "IMPLICATION_SIGN", "QUOTED", "WHITESPACE", 
            "COMMENT", "BLOCK_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "FOR_LOOP", "IN_TOKEN", "DO_TOKEN", 
                  "DONE_TOKEN", "NEGATION", "SCIENTIFIC_NUMBER", "DECIMAL", 
                  "INTEGER", "TERM", "PLACE_HOLDER", "OPEN_ARGUMENTS", "CLOSE_ARGUMENTS", 
                  "ITEM_SEPARATOR", "END_OF_CLAUSE", "WEIGHT_SEPARATOR", 
                  "IMPLICATION_SIGN", "QUOTED", "WHITESPACE", "COMMENT", 
                  "BLOCK_COMMENT" ]

    grammarFileName = "NeuralLog.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


