# Generated from /Users/Victor/PycharmProjects/NeuralLog/language/parser/autogenerated/NeuralLog.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\32")
        buf.write("\u00cd\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\3\2\3\2\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3\5\3\5")
        buf.write("\3\6\3\6\3\6\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3")
        buf.write("\t\3\t\3\n\5\nO\n\n\3\n\7\nR\n\n\f\n\16\nU\13\n\3\n\3")
        buf.write("\n\6\nY\n\n\r\n\16\nZ\3\n\3\n\5\n_\n\n\3\n\6\nb\n\n\r")
        buf.write("\n\16\nc\3\13\5\13g\n\13\3\13\7\13j\n\13\f\13\16\13m\13")
        buf.write("\13\3\13\3\13\6\13q\n\13\r\13\16\13r\3\f\5\fv\n\f\3\f")
        buf.write("\6\fy\n\f\r\f\16\fz\3\r\6\r~\n\r\r\r\16\r\177\3\16\3\16")
        buf.write("\6\16\u0084\n\16\r\16\16\16\u0085\3\16\3\16\3\17\3\17")
        buf.write("\3\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23\3\23\3\24\3\24")
        buf.write("\3\24\3\25\3\25\3\26\3\26\3\26\3\26\7\26\u009e\n\26\f")
        buf.write("\26\16\26\u00a1\13\26\3\26\3\26\3\26\3\26\3\26\7\26\u00a8")
        buf.write("\n\26\f\26\16\26\u00ab\13\26\3\26\5\26\u00ae\n\26\3\27")
        buf.write("\6\27\u00b1\n\27\r\27\16\27\u00b2\3\27\3\27\3\30\3\30")
        buf.write("\7\30\u00b9\n\30\f\30\16\30\u00bc\13\30\3\30\3\30\3\31")
        buf.write("\3\31\3\31\3\31\7\31\u00c4\n\31\f\31\16\31\u00c7\13\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\u00c5\2\32\3\3\5\4\7\5\t\6")
        buf.write("\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20")
        buf.write("\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\3\2\13\3")
        buf.write("\2\62;\4\2GGgg\4\2--//\7\2//\62;C\\aac|\3\2$$\3\2))\5")
        buf.write("\2\13\f\17\17\"\"\4\2%%\'\'\4\2\f\f\17\17\2\u00e0\2\3")
        buf.write("\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2")
        buf.write("\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2")
        buf.write("\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2")
        buf.write("\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3")
        buf.write("\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2")
        buf.write("/\3\2\2\2\2\61\3\2\2\2\3\63\3\2\2\2\5\65\3\2\2\2\78\3")
        buf.write("\2\2\2\t:\3\2\2\2\13>\3\2\2\2\rA\3\2\2\2\17D\3\2\2\2\21")
        buf.write("I\3\2\2\2\23N\3\2\2\2\25f\3\2\2\2\27u\3\2\2\2\31}\3\2")
        buf.write("\2\2\33\u0081\3\2\2\2\35\u0089\3\2\2\2\37\u008b\3\2\2")
        buf.write("\2!\u008d\3\2\2\2#\u008f\3\2\2\2%\u0091\3\2\2\2\'\u0094")
        buf.write("\3\2\2\2)\u0097\3\2\2\2+\u00ad\3\2\2\2-\u00b0\3\2\2\2")
        buf.write("/\u00b6\3\2\2\2\61\u00bf\3\2\2\2\63\64\7}\2\2\64\4\3\2")
        buf.write("\2\2\65\66\7\60\2\2\66\67\7\60\2\2\67\6\3\2\2\289\7\177")
        buf.write("\2\29\b\3\2\2\2:;\7h\2\2;<\7q\2\2<=\7t\2\2=\n\3\2\2\2")
        buf.write(">?\7k\2\2?@\7p\2\2@\f\3\2\2\2AB\7f\2\2BC\7q\2\2C\16\3")
        buf.write("\2\2\2DE\7f\2\2EF\7q\2\2FG\7p\2\2GH\7g\2\2H\20\3\2\2\2")
        buf.write("IJ\7p\2\2JK\7q\2\2KL\7v\2\2L\22\3\2\2\2MO\7/\2\2NM\3\2")
        buf.write("\2\2NO\3\2\2\2OS\3\2\2\2PR\t\2\2\2QP\3\2\2\2RU\3\2\2\2")
        buf.write("SQ\3\2\2\2ST\3\2\2\2TV\3\2\2\2US\3\2\2\2VX\7\60\2\2WY")
        buf.write("\t\2\2\2XW\3\2\2\2YZ\3\2\2\2ZX\3\2\2\2Z[\3\2\2\2[\\\3")
        buf.write("\2\2\2\\^\t\3\2\2]_\t\4\2\2^]\3\2\2\2^_\3\2\2\2_a\3\2")
        buf.write("\2\2`b\t\2\2\2a`\3\2\2\2bc\3\2\2\2ca\3\2\2\2cd\3\2\2\2")
        buf.write("d\24\3\2\2\2eg\7/\2\2fe\3\2\2\2fg\3\2\2\2gk\3\2\2\2hj")
        buf.write("\t\2\2\2ih\3\2\2\2jm\3\2\2\2ki\3\2\2\2kl\3\2\2\2ln\3\2")
        buf.write("\2\2mk\3\2\2\2np\7\60\2\2oq\t\2\2\2po\3\2\2\2qr\3\2\2")
        buf.write("\2rp\3\2\2\2rs\3\2\2\2s\26\3\2\2\2tv\7/\2\2ut\3\2\2\2")
        buf.write("uv\3\2\2\2vx\3\2\2\2wy\t\2\2\2xw\3\2\2\2yz\3\2\2\2zx\3")
        buf.write("\2\2\2z{\3\2\2\2{\30\3\2\2\2|~\t\5\2\2}|\3\2\2\2~\177")
        buf.write("\3\2\2\2\177}\3\2\2\2\177\u0080\3\2\2\2\u0080\32\3\2\2")
        buf.write("\2\u0081\u0083\7}\2\2\u0082\u0084\t\5\2\2\u0083\u0082")
        buf.write("\3\2\2\2\u0084\u0085\3\2\2\2\u0085\u0083\3\2\2\2\u0085")
        buf.write("\u0086\3\2\2\2\u0086\u0087\3\2\2\2\u0087\u0088\7\177\2")
        buf.write("\2\u0088\34\3\2\2\2\u0089\u008a\7*\2\2\u008a\36\3\2\2")
        buf.write("\2\u008b\u008c\7+\2\2\u008c \3\2\2\2\u008d\u008e\7.\2")
        buf.write("\2\u008e\"\3\2\2\2\u008f\u0090\7\60\2\2\u0090$\3\2\2\2")
        buf.write("\u0091\u0092\7<\2\2\u0092\u0093\7<\2\2\u0093&\3\2\2\2")
        buf.write("\u0094\u0095\7<\2\2\u0095\u0096\7/\2\2\u0096(\3\2\2\2")
        buf.write("\u0097\u0098\7&\2\2\u0098*\3\2\2\2\u0099\u009f\7$\2\2")
        buf.write("\u009a\u009b\7^\2\2\u009b\u009e\13\2\2\2\u009c\u009e\n")
        buf.write("\6\2\2\u009d\u009a\3\2\2\2\u009d\u009c\3\2\2\2\u009e\u00a1")
        buf.write("\3\2\2\2\u009f\u009d\3\2\2\2\u009f\u00a0\3\2\2\2\u00a0")
        buf.write("\u00a2\3\2\2\2\u00a1\u009f\3\2\2\2\u00a2\u00ae\7$\2\2")
        buf.write("\u00a3\u00a9\7)\2\2\u00a4\u00a5\7^\2\2\u00a5\u00a8\13")
        buf.write("\2\2\2\u00a6\u00a8\n\7\2\2\u00a7\u00a4\3\2\2\2\u00a7\u00a6")
        buf.write("\3\2\2\2\u00a8\u00ab\3\2\2\2\u00a9\u00a7\3\2\2\2\u00a9")
        buf.write("\u00aa\3\2\2\2\u00aa\u00ac\3\2\2\2\u00ab\u00a9\3\2\2\2")
        buf.write("\u00ac\u00ae\7)\2\2\u00ad\u0099\3\2\2\2\u00ad\u00a3\3")
        buf.write("\2\2\2\u00ae,\3\2\2\2\u00af\u00b1\t\b\2\2\u00b0\u00af")
        buf.write("\3\2\2\2\u00b1\u00b2\3\2\2\2\u00b2\u00b0\3\2\2\2\u00b2")
        buf.write("\u00b3\3\2\2\2\u00b3\u00b4\3\2\2\2\u00b4\u00b5\b\27\2")
        buf.write("\2\u00b5.\3\2\2\2\u00b6\u00ba\t\t\2\2\u00b7\u00b9\n\n")
        buf.write("\2\2\u00b8\u00b7\3\2\2\2\u00b9\u00bc\3\2\2\2\u00ba\u00b8")
        buf.write("\3\2\2\2\u00ba\u00bb\3\2\2\2\u00bb\u00bd\3\2\2\2\u00bc")
        buf.write("\u00ba\3\2\2\2\u00bd\u00be\b\30\2\2\u00be\60\3\2\2\2\u00bf")
        buf.write("\u00c0\7\61\2\2\u00c0\u00c1\7,\2\2\u00c1\u00c5\3\2\2\2")
        buf.write("\u00c2\u00c4\13\2\2\2\u00c3\u00c2\3\2\2\2\u00c4\u00c7")
        buf.write("\3\2\2\2\u00c5\u00c6\3\2\2\2\u00c5\u00c3\3\2\2\2\u00c6")
        buf.write("\u00c8\3\2\2\2\u00c7\u00c5\3\2\2\2\u00c8\u00c9\7,\2\2")
        buf.write("\u00c9\u00ca\7\61\2\2\u00ca\u00cb\3\2\2\2\u00cb\u00cc")
        buf.write("\b\31\2\2\u00cc\62\3\2\2\2\27\2NSZ^cfkruz\177\u0085\u009d")
        buf.write("\u009f\u00a7\u00a9\u00ad\u00b2\u00ba\u00c5\3\b\2\2")
        return buf.getvalue()


class NeuralLogLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    FOR_LOOP = 4
    IN_TOKEN = 5
    DO_TOKEN = 6
    DONE_TOKEN = 7
    NEGATION = 8
    SCIENTIFIC_NUMBER = 9
    DECIMAL = 10
    INTEGER = 11
    TERM = 12
    PLACE_HOLDER = 13
    OPEN_ARGUMENTS = 14
    CLOSE_ARGUMENTS = 15
    ITEM_SEPARATOR = 16
    END_OF_CLAUSE = 17
    WEIGHT_SEPARATOR = 18
    IMPLICATION_SIGN = 19
    TRAINABLE_IDENTIFIER = 20
    QUOTED = 21
    WHITESPACE = 22
    COMMENT = 23
    BLOCK_COMMENT = 24

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'..'", "'}'", "'for'", "'in'", "'do'", "'done'", "'not'", 
            "'('", "')'", "','", "'.'", "'::'", "':-'", "'$'" ]

    symbolicNames = [ "<INVALID>",
            "FOR_LOOP", "IN_TOKEN", "DO_TOKEN", "DONE_TOKEN", "NEGATION", 
            "SCIENTIFIC_NUMBER", "DECIMAL", "INTEGER", "TERM", "PLACE_HOLDER", 
            "OPEN_ARGUMENTS", "CLOSE_ARGUMENTS", "ITEM_SEPARATOR", "END_OF_CLAUSE", 
            "WEIGHT_SEPARATOR", "IMPLICATION_SIGN", "TRAINABLE_IDENTIFIER", 
            "QUOTED", "WHITESPACE", "COMMENT", "BLOCK_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "FOR_LOOP", "IN_TOKEN", "DO_TOKEN", 
                  "DONE_TOKEN", "NEGATION", "SCIENTIFIC_NUMBER", "DECIMAL", 
                  "INTEGER", "TERM", "PLACE_HOLDER", "OPEN_ARGUMENTS", "CLOSE_ARGUMENTS", 
                  "ITEM_SEPARATOR", "END_OF_CLAUSE", "WEIGHT_SEPARATOR", 
                  "IMPLICATION_SIGN", "TRAINABLE_IDENTIFIER", "QUOTED", 
                  "WHITESPACE", "COMMENT", "BLOCK_COMMENT" ]

    grammarFileName = "NeuralLog.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


