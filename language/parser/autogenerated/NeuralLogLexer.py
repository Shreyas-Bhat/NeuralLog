# Generated from /Users/Victor/PycharmProjects/NeuralLog/language/parser/autogenerated/NeuralLog.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\32")
        buf.write("\u00c4\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\3\2\3\2\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3\5\3\5")
        buf.write("\3\6\3\6\3\6\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3")
        buf.write("\t\3\t\3\n\7\nO\n\n\f\n\16\nR\13\n\3\n\3\n\6\nV\n\n\r")
        buf.write("\n\16\nW\3\n\3\n\5\n\\\n\n\3\n\6\n_\n\n\r\n\16\n`\3\13")
        buf.write("\7\13d\n\13\f\13\16\13g\13\13\3\13\3\13\6\13k\n\13\r\13")
        buf.write("\16\13l\3\f\6\fp\n\f\r\f\16\fq\3\r\6\ru\n\r\r\r\16\rv")
        buf.write("\3\16\3\16\6\16{\n\16\r\16\16\16|\3\16\3\16\3\17\3\17")
        buf.write("\3\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23\3\23\3\24\3\24")
        buf.write("\3\24\3\25\3\25\3\26\3\26\3\26\3\26\7\26\u0095\n\26\f")
        buf.write("\26\16\26\u0098\13\26\3\26\3\26\3\26\3\26\3\26\7\26\u009f")
        buf.write("\n\26\f\26\16\26\u00a2\13\26\3\26\5\26\u00a5\n\26\3\27")
        buf.write("\6\27\u00a8\n\27\r\27\16\27\u00a9\3\27\3\27\3\30\3\30")
        buf.write("\7\30\u00b0\n\30\f\30\16\30\u00b3\13\30\3\30\3\30\3\31")
        buf.write("\3\31\3\31\3\31\7\31\u00bb\n\31\f\31\16\31\u00be\13\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\u00bc\2\32\3\3\5\4\7\5\t\6")
        buf.write("\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20")
        buf.write("\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\3\2\13\3")
        buf.write("\2\62;\4\2GGgg\4\2--//\7\2//\62;C\\aac|\3\2$$\3\2))\5")
        buf.write("\2\13\f\17\17\"\"\4\2%%\'\'\4\2\f\f\17\17\2\u00d4\2\3")
        buf.write("\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2")
        buf.write("\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2")
        buf.write("\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2")
        buf.write("\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3")
        buf.write("\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2")
        buf.write("/\3\2\2\2\2\61\3\2\2\2\3\63\3\2\2\2\5\65\3\2\2\2\78\3")
        buf.write("\2\2\2\t:\3\2\2\2\13>\3\2\2\2\rA\3\2\2\2\17D\3\2\2\2\21")
        buf.write("I\3\2\2\2\23P\3\2\2\2\25e\3\2\2\2\27o\3\2\2\2\31t\3\2")
        buf.write("\2\2\33x\3\2\2\2\35\u0080\3\2\2\2\37\u0082\3\2\2\2!\u0084")
        buf.write("\3\2\2\2#\u0086\3\2\2\2%\u0088\3\2\2\2\'\u008b\3\2\2\2")
        buf.write(")\u008e\3\2\2\2+\u00a4\3\2\2\2-\u00a7\3\2\2\2/\u00ad\3")
        buf.write("\2\2\2\61\u00b6\3\2\2\2\63\64\7}\2\2\64\4\3\2\2\2\65\66")
        buf.write("\7\60\2\2\66\67\7\60\2\2\67\6\3\2\2\289\7\177\2\29\b\3")
        buf.write("\2\2\2:;\7h\2\2;<\7q\2\2<=\7t\2\2=\n\3\2\2\2>?\7k\2\2")
        buf.write("?@\7p\2\2@\f\3\2\2\2AB\7f\2\2BC\7q\2\2C\16\3\2\2\2DE\7")
        buf.write("f\2\2EF\7q\2\2FG\7p\2\2GH\7g\2\2H\20\3\2\2\2IJ\7p\2\2")
        buf.write("JK\7q\2\2KL\7v\2\2L\22\3\2\2\2MO\t\2\2\2NM\3\2\2\2OR\3")
        buf.write("\2\2\2PN\3\2\2\2PQ\3\2\2\2QS\3\2\2\2RP\3\2\2\2SU\7\60")
        buf.write("\2\2TV\t\2\2\2UT\3\2\2\2VW\3\2\2\2WU\3\2\2\2WX\3\2\2\2")
        buf.write("XY\3\2\2\2Y[\t\3\2\2Z\\\t\4\2\2[Z\3\2\2\2[\\\3\2\2\2\\")
        buf.write("^\3\2\2\2]_\t\2\2\2^]\3\2\2\2_`\3\2\2\2`^\3\2\2\2`a\3")
        buf.write("\2\2\2a\24\3\2\2\2bd\t\2\2\2cb\3\2\2\2dg\3\2\2\2ec\3\2")
        buf.write("\2\2ef\3\2\2\2fh\3\2\2\2ge\3\2\2\2hj\7\60\2\2ik\t\2\2")
        buf.write("\2ji\3\2\2\2kl\3\2\2\2lj\3\2\2\2lm\3\2\2\2m\26\3\2\2\2")
        buf.write("np\t\2\2\2on\3\2\2\2pq\3\2\2\2qo\3\2\2\2qr\3\2\2\2r\30")
        buf.write("\3\2\2\2su\t\5\2\2ts\3\2\2\2uv\3\2\2\2vt\3\2\2\2vw\3\2")
        buf.write("\2\2w\32\3\2\2\2xz\7}\2\2y{\t\5\2\2zy\3\2\2\2{|\3\2\2")
        buf.write("\2|z\3\2\2\2|}\3\2\2\2}~\3\2\2\2~\177\7\177\2\2\177\34")
        buf.write("\3\2\2\2\u0080\u0081\7*\2\2\u0081\36\3\2\2\2\u0082\u0083")
        buf.write("\7+\2\2\u0083 \3\2\2\2\u0084\u0085\7.\2\2\u0085\"\3\2")
        buf.write("\2\2\u0086\u0087\7\60\2\2\u0087$\3\2\2\2\u0088\u0089\7")
        buf.write("<\2\2\u0089\u008a\7<\2\2\u008a&\3\2\2\2\u008b\u008c\7")
        buf.write("<\2\2\u008c\u008d\7/\2\2\u008d(\3\2\2\2\u008e\u008f\7")
        buf.write("&\2\2\u008f*\3\2\2\2\u0090\u0096\7$\2\2\u0091\u0092\7")
        buf.write("^\2\2\u0092\u0095\13\2\2\2\u0093\u0095\n\6\2\2\u0094\u0091")
        buf.write("\3\2\2\2\u0094\u0093\3\2\2\2\u0095\u0098\3\2\2\2\u0096")
        buf.write("\u0094\3\2\2\2\u0096\u0097\3\2\2\2\u0097\u0099\3\2\2\2")
        buf.write("\u0098\u0096\3\2\2\2\u0099\u00a5\7$\2\2\u009a\u00a0\7")
        buf.write(")\2\2\u009b\u009c\7^\2\2\u009c\u009f\13\2\2\2\u009d\u009f")
        buf.write("\n\7\2\2\u009e\u009b\3\2\2\2\u009e\u009d\3\2\2\2\u009f")
        buf.write("\u00a2\3\2\2\2\u00a0\u009e\3\2\2\2\u00a0\u00a1\3\2\2\2")
        buf.write("\u00a1\u00a3\3\2\2\2\u00a2\u00a0\3\2\2\2\u00a3\u00a5\7")
        buf.write(")\2\2\u00a4\u0090\3\2\2\2\u00a4\u009a\3\2\2\2\u00a5,\3")
        buf.write("\2\2\2\u00a6\u00a8\t\b\2\2\u00a7\u00a6\3\2\2\2\u00a8\u00a9")
        buf.write("\3\2\2\2\u00a9\u00a7\3\2\2\2\u00a9\u00aa\3\2\2\2\u00aa")
        buf.write("\u00ab\3\2\2\2\u00ab\u00ac\b\27\2\2\u00ac.\3\2\2\2\u00ad")
        buf.write("\u00b1\t\t\2\2\u00ae\u00b0\n\n\2\2\u00af\u00ae\3\2\2\2")
        buf.write("\u00b0\u00b3\3\2\2\2\u00b1\u00af\3\2\2\2\u00b1\u00b2\3")
        buf.write("\2\2\2\u00b2\u00b4\3\2\2\2\u00b3\u00b1\3\2\2\2\u00b4\u00b5")
        buf.write("\b\30\2\2\u00b5\60\3\2\2\2\u00b6\u00b7\7\61\2\2\u00b7")
        buf.write("\u00b8\7,\2\2\u00b8\u00bc\3\2\2\2\u00b9\u00bb\13\2\2\2")
        buf.write("\u00ba\u00b9\3\2\2\2\u00bb\u00be\3\2\2\2\u00bc\u00bd\3")
        buf.write("\2\2\2\u00bc\u00ba\3\2\2\2\u00bd\u00bf\3\2\2\2\u00be\u00bc")
        buf.write("\3\2\2\2\u00bf\u00c0\7,\2\2\u00c0\u00c1\7\61\2\2\u00c1")
        buf.write("\u00c2\3\2\2\2\u00c2\u00c3\b\31\2\2\u00c3\62\3\2\2\2\24")
        buf.write("\2PW[`elqv|\u0094\u0096\u009e\u00a0\u00a4\u00a9\u00b1")
        buf.write("\u00bc\3\b\2\2")
        return buf.getvalue()


class NeuralLogLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    FOR_LOOP = 4
    IN_TOKEN = 5
    DO_TOKEN = 6
    DONE_TOKEN = 7
    NEGATION = 8
    SCIENTIFIC_NUMBER = 9
    DECIMAL = 10
    INTEGER = 11
    TERM = 12
    PLACE_HOLDER = 13
    OPEN_ARGUMENTS = 14
    CLOSE_ARGUMENTS = 15
    ITEM_SEPARATOR = 16
    END_OF_CLAUSE = 17
    WEIGHT_SEPARATOR = 18
    IMPLICATION_SIGN = 19
    TRAINABLE_IDENTIFIER = 20
    QUOTED = 21
    WHITESPACE = 22
    COMMENT = 23
    BLOCK_COMMENT = 24

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'..'", "'}'", "'for'", "'in'", "'do'", "'done'", "'not'", 
            "'('", "')'", "','", "'.'", "'::'", "':-'", "'$'" ]

    symbolicNames = [ "<INVALID>",
            "FOR_LOOP", "IN_TOKEN", "DO_TOKEN", "DONE_TOKEN", "NEGATION", 
            "SCIENTIFIC_NUMBER", "DECIMAL", "INTEGER", "TERM", "PLACE_HOLDER", 
            "OPEN_ARGUMENTS", "CLOSE_ARGUMENTS", "ITEM_SEPARATOR", "END_OF_CLAUSE", 
            "WEIGHT_SEPARATOR", "IMPLICATION_SIGN", "TRAINABLE_IDENTIFIER", 
            "QUOTED", "WHITESPACE", "COMMENT", "BLOCK_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "FOR_LOOP", "IN_TOKEN", "DO_TOKEN", 
                  "DONE_TOKEN", "NEGATION", "SCIENTIFIC_NUMBER", "DECIMAL", 
                  "INTEGER", "TERM", "PLACE_HOLDER", "OPEN_ARGUMENTS", "CLOSE_ARGUMENTS", 
                  "ITEM_SEPARATOR", "END_OF_CLAUSE", "WEIGHT_SEPARATOR", 
                  "IMPLICATION_SIGN", "TRAINABLE_IDENTIFIER", "QUOTED", 
                  "WHITESPACE", "COMMENT", "BLOCK_COMMENT" ]

    grammarFileName = "NeuralLog.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


