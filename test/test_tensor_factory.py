"""
Tests the TensorFactory.
"""

import unittest

import numpy as np
import tensorflow as tf
from antlr4 import FileStream, CommonTokenStream

from src.knowledge.tensor_factory import TensorFactory
from src.language.language import Atom
from src.language.parser.autogenerated.NeuralLogLexer import NeuralLogLexer
from src.language.parser.autogenerated.NeuralLogParser import NeuralLogParser
from src.language.parser.neural_log_listener import NeuralLogTransverse

EQUAL_DELTA = 3


# noinspection DuplicatedCode
class TestTensorFactory(unittest.TestCase):

    # noinspection PyMissingOrEmptyDocstring
    @classmethod
    def setUpClass(cls) -> None:
        # Create the lexer
        lexer = NeuralLogLexer(FileStream("resources/tensor_factory.pl",
                                          "utf-8"))
        # Perform the lexer analysis
        stream = CommonTokenStream(lexer)
        # Create the parser
        parser = NeuralLogParser(stream)
        # Parse the tokens from the input
        abstract_syntax_tree = parser.program()
        # Create the Tree transverse
        transverse = NeuralLogTransverse()
        # Transverse the Abstract Syntax Tree
        neural_program = transverse(abstract_syntax_tree)

        # Create the TensorFactory
        cls.tensor_factory = TensorFactory(neural_program)

    # def test_general(self):
    # tensor_factory = self.tensor_factory  # type: TensorFactory
    # program = tensor_factory.program  # type: NeuralLogProgram
    # self.assertEqual(len(program.constants), 45,
    #                  "Wrong number of constants!")
    # self.assertEqual(len(program.iterable_constants), 27,
    #                  "Wrong number of constants!")
    # pass

    def test_arity_0_not_trainable(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        atom = Atom("predicate_0_not_trainable", weight=0.3)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_0_not_trainable.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight, evaluated, places=EQUAL_DELTA)

    def test_arity_0_trainable(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        atom = Atom("predicate_0_trainable", weight=0.5)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_0_trainable.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight, evaluated, places=EQUAL_DELTA)

    def test_arity_1_0_not_trainable_number(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = 2019
        atom = Atom("year", value, weight=0.7)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_1_0_not_trainable_number.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight * value, evaluated,
                               places=EQUAL_DELTA)

    def test_arity_1_0_trainable_number(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = 21
        atom = Atom("century", value, weight=0.9)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_1_0_trainable_number.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight * value, evaluated,
                               places=EQUAL_DELTA)

    def test_arity_1_1_not_trainable_constant(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = "some_male"
        atom = Atom("male", value, weight=0.07)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_1_1_not_trainable_constant.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight, evaluated, places=EQUAL_DELTA)

    def test_arity_1_1_not_trainable_iterable_constant(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = "christopher"
        atom = Atom("male", value, weight=0.07)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_1_1_not_trainable_iterable_constant.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight, evaluated, places=EQUAL_DELTA)

    def test_arity_1_1_not_trainable_variable(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = "X"
        atom = Atom("male", value)
        correct = np.array([[0.02], [0.03], [0.0], [0.05], [0.0], [0.0], [0.07],
                            [0.11], [0.13], [0.0], [0.17], [0.0], [0.0], [0.19],
                            [0.0], [0.0], [0.23], [0.31], [0.0], [0.0]])
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_1_1_not_trainable_variable.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((tensor_factory.constant_size, 1), evaluated.shape)
        for i in range(tensor_factory.constant_size):
            self.assertAlmostEqual(
                correct[i, 0], evaluated[i, 0], places=EQUAL_DELTA,
                msg="Incorrect value for constant {}: {}".format(
                    i, tensor_factory.program.iterable_constants[i]))

    def test_arity_1_1_trainable_constant(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = "some_female"
        atom = Atom("female", value, weight=0.107)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_1_1_trainable_constant.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight, evaluated, places=EQUAL_DELTA)

    def test_arity_1_1_trainable_iterable_constant(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = "christine"
        atom = Atom("female", value, weight=0.107)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_1_1_trainable_iterable_constant.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight, evaluated, places=EQUAL_DELTA)

    def test_arity_1_1_trainable_variable(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = "X"
        atom = Atom("female", value)
        correct = np.array(
            [[0.0], [0.0], [0.101], [0.0], [0.103], [0.107], [0.0], [0.0],
             [0.0], [0.109], [0.0], [0.127], [0.137], [0.0], [0.149], [0.151],
             [0.0], [0.0], [0.157], [0.163]])
        mask = np.array(
            [[0.0], [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [0.0],
             [0.0], [1.0], [0.0], [1.0], [1.0], [0.0], [1.0], [1.0],
             [0.0], [0.0], [1.0], [1.0]])
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_1_1_trainable_variable.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        evaluated = evaluated * mask
        self.assertEqual((tensor_factory.constant_size, 1), evaluated.shape)
        for i in range(tensor_factory.constant_size):
            self.assertAlmostEqual(
                correct[i, 0], evaluated[i, 0], places=EQUAL_DELTA,
                msg="Incorrect value for constant {}: {}".format(
                    i, tensor_factory.program.iterable_constants[i]))

    def test_arity_2_0_not_trainable_number_number(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value1 = 2.0
        value2 = 3.0
        atom = Atom("multiply", value1, value2, weight=0.5)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_0_not_trainable_number_number.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight * value1 * value2, evaluated,
                               places=EQUAL_DELTA)

    def test_arity_2_0_trainable_number_number(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value1 = 4.0
        value2 = 3.0
        atom = Atom("multiply_2", value1, value2, weight=0.25)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_0_trainable_number_number.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight * value1 * value2, evaluated,
                               places=EQUAL_DELTA)

    def test_arity_2_1_not_trainable_constant_number(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = 30
        atom = Atom("age", "some_male", value, weight=0.211)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_1_not_trainable_constant_number.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight * value, evaluated,
                               places=EQUAL_DELTA)

    def test_arity_2_1_not_trainable_iterable_constant_number(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = 41
        atom = Atom("age", "colin", value, weight=0.223)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.
                arity_2_1_not_trainable_iterable_constant_number.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight * value, evaluated,
                               places=EQUAL_DELTA)

    def test_arity_2_1_not_trainable_variable_number(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = 27
        atom = Atom("age", "X", value)
        weight = np.array([[0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0],
                           [0.0], [0.227], [0.241], [0.0], [0.0], [0.0],
                           [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]])
        values = np.array([[0], [0], [0], [0], [0], [0], [0],
                           [41], [27], [27], [0], [0], [0], [0],
                           [0], [0], [0], [0], [0], [0]])
        correct = weight * values
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_1_not_trainable_variable_number.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((tensor_factory.constant_size, 1), evaluated.shape)
        for i in range(tensor_factory.constant_size):
            self.assertAlmostEqual(
                correct[i, 0], evaluated[i, 0], places=EQUAL_DELTA,
                msg="Incorrect value for constant {}: {}".format(
                    i, tensor_factory.program.iterable_constants[i]))

    def test_arity_2_1_not_trainable_number_constant(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = 1.72
        atom = Atom("inv_height", value, "some_female", weight=0.337)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_1_not_trainable_number_constant.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight * value, evaluated,
                               places=EQUAL_DELTA)

    def test_arity_2_1_not_trainable_number_iterable_constant(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = 1.73
        atom = Atom("inv_height", value, "jennifer", weight=0.353)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.
                arity_2_1_not_trainable_number_iterable_constant.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight * value, evaluated,
                               places=EQUAL_DELTA)

    def test_arity_2_1_not_trainable_number_variable(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = 1.65
        atom = Atom("inv_height", value, "X")
        weight = np.array(
            [[0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0],
             [0.0], [0.0], [0.0], [0.0], [0.359], [0.331], [0.0], [0.0],
             [0.367], [0.0], [0.0], [0.0]])
        values = np.array(
            [[0.0], [0.0], [0.0], [0.0], [1.81], [0.0], [0.0], [1.57],
             [2.06], [1.7], [1.9], [1.73], [1.65], [1.65], [0.0], [0.0],
             [1.65], [0.0], [0.0], [0.0]])
        correct = weight * values
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_1_not_trainable_number_variable.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((tensor_factory.constant_size, 1), evaluated.shape)
        for i in range(tensor_factory.constant_size):
            self.assertAlmostEqual(
                correct[i, 0], evaluated[i, 0], places=EQUAL_DELTA,
                msg="Incorrect value for constant {}: {}".format(
                    i, tensor_factory.program.iterable_constants[i]))

    def test_arity_2_1_trainable_constant_number(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = 1.73
        atom = Atom("height", "some_male", value, weight=0.307)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_1_trainable_constant_number.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight * value, evaluated,
                               places=EQUAL_DELTA)

    def test_arity_2_1_trainable_iterable_constant_number(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = 1.7
        atom = Atom("height", "james", value, weight=0.317)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.
                arity_2_1_trainable_iterable_constant_number.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight * value, evaluated,
                               places=EQUAL_DELTA)

    def test_arity_2_1_trainable_variable_number(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = 1.7
        atom = Atom("height", "X", value)
        weight = np.array(
            [[0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0],
             [0.0], [0.347], [0.317], [0.0], [0.0], [0.0], [0.0], [0.0],
             [0.0], [0.0], [0.0], [0.0]])
        values = np.array(
            [[0.0], [0.0], [0.0], [0.0], [1.81], [0.0], [0.0], [1.57],
             [2.06], [1.7], [1.7], [1.73], [1.59], [1.65], [0.0], [0.0],
             [1.82], [0.0], [0.0], [0.0]])
        correct = weight * values
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_1_trainable_variable_number.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((tensor_factory.constant_size, 1), evaluated.shape)
        for i in range(tensor_factory.constant_size):
            self.assertAlmostEqual(
                correct[i, 0], evaluated[i, 0], places=EQUAL_DELTA,
                msg="Incorrect value for constant {}: {}".format(
                    i, tensor_factory.program.iterable_constants[i]))

    def test_arity_2_1_trainable_number_constant(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = 30
        atom = Atom("inv_age", value, "some_male", weight=0.211)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_1_trainable_number_constant.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight * value, evaluated,
                               places=EQUAL_DELTA)

    def test_arity_2_1_trainable_number_iterable_constant(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = 27
        atom = Atom("inv_age", value, "francesca", weight=0.241)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.
                arity_2_1_trainable_number_iterable_constant.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight * value, evaluated,
                               places=EQUAL_DELTA)

    def test_arity_2_1_trainable_number_variable(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = 27
        atom = Atom("inv_age", value, "X")
        weight = np.array(
            [[0], [0], [0], [0], [0], [0], [0], [0],
             [27], [27], [0], [0], [0], [0], [0], [0],
             [0], [0], [0], [0]])
        values = np.array(
            [[0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.223],
             [0.227], [0.241], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0],
             [0.0], [0.0], [0.0], [0.0]])
        correct = weight * values
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_1_trainable_number_variable.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((tensor_factory.constant_size, 1), evaluated.shape)
        for i in range(tensor_factory.constant_size):
            self.assertAlmostEqual(
                correct[i, 0], evaluated[i, 0], places=EQUAL_DELTA,
                msg="Incorrect value for constant {}: {}".format(
                    i, tensor_factory.program.iterable_constants[i]))

    def test_arity_2_2_not_trainable_constant_constant(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = ["some_male", "some_female"]
        atom = Atom("husband", *value, weight=0.6012)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_2_not_trainable_constant_constant.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight, evaluated, places=EQUAL_DELTA)

    def test_arity_2_2_not_trainable_constant_iterable_constant(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = ["some_female", "jennifer"]
        atom = Atom("daughter", *value, weight=0.9415)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_2_not_trainable_constant_iterable_constant.
                __func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight, evaluated, places=EQUAL_DELTA)

    def test_arity_2_2_not_trainable_constant_variable(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = ["some_female", "X"]
        atom = Atom("sister", *value)
        correct = np.array([[0.0], [0.0], [0.6853], [0.0], [0.0], [0.0], [0.0],
                            [0.0], [0.0], [0.0], [0.0], [0.5853], [0.0],
                            [0.7853], [0.0], [0.0], [0.0], [0.0], [0.0],
                            [0.0]])
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_2_not_trainable_constant_variable.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tf.sparse.to_dense(tensor))
        self.assertEqual((tensor_factory.constant_size, 1), evaluated.shape)
        for i in range(tensor_factory.constant_size):
            self.assertAlmostEqual(
                correct[i, 0], evaluated[i, 0], places=EQUAL_DELTA,
                msg="Incorrect value for constant {}: {}".format(
                    i, tensor_factory.program.iterable_constants[i]))

    def test_arity_2_2_not_trainable_iterable_constant_constant(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = ["james", "some_female"]
        atom = Atom("husband", *value, weight=0.7019)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_2_not_trainable_iterable_constant_constant.
                __func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight, evaluated, places=EQUAL_DELTA)

    def test_arity_2_2_not_trainable_iterable_constant_iterable_constant(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = ["james", "victoria"]
        atom = Atom("husband", *value, weight=0.577)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.
                arity_2_2_not_trainable_iterable_constant_iterable_constant.
                __func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight, evaluated, places=EQUAL_DELTA)

    def test_arity_2_2_not_trainable_iterable_constant_variable(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = ["james", "X"]
        atom = Atom("father", *value)
        correct = np.array([[0.0], [0.0], [0.0], [0.0], [0.733], [0.0], [0.0],
                            [0.739], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0],
                            [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]])
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_2_not_trainable_iterable_constant_variable.
                __func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tf.sparse.to_dense(tensor))
        self.assertEqual((tensor_factory.constant_size, 1), evaluated.shape)
        for i in range(tensor_factory.constant_size):
            self.assertAlmostEqual(
                correct[i, 0], evaluated[i, 0], places=EQUAL_DELTA,
                msg="Incorrect value for constant {}: {}".format(
                    i, tensor_factory.program.iterable_constants[i]))

    def test_arity_2_2_not_trainable_variable_constant(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = ["X", "some_female"]
        atom = Atom("brother", *value)
        correct = np.array([[0.0], [0.0], [0.6853], [0.0], [0.0], [0.0], [0.0],
                            [0.0], [0.0], [0.0], [0.0], [0.5853], [0.0],
                            [0.7853], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]])
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_2_not_trainable_variable_constant.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tf.sparse.to_dense(tensor))
        self.assertEqual((tensor_factory.constant_size, 1), evaluated.shape)
        for i in range(tensor_factory.constant_size):
            self.assertAlmostEqual(
                correct[i, 0], evaluated[i, 0], places=EQUAL_DELTA,
                msg="Incorrect value for constant {}: {}".format(
                    i, tensor_factory.program.iterable_constants[i]))

    def test_arity_2_2_not_trainable_variable_iterable_constant(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = ["X", "james"]
        atom = Atom("daughter", *value)
        correct = np.array([[0.0], [0.0], [0.0], [0.0], [0.947], [0.0], [0.0],
                            [0.0], [0.0], [0.0], [0.0], [0.094], [0.0], [0.0],
                            [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]])
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_2_not_trainable_variable_iterable_constant.
                __func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tf.sparse.to_dense(tensor))
        self.assertEqual((tensor_factory.constant_size, 1), evaluated.shape)
        for i in range(tensor_factory.constant_size):
            self.assertAlmostEqual(
                correct[i, 0], evaluated[i, 0], places=EQUAL_DELTA,
                msg="Incorrect value for constant {}: {}".format(
                    i, tensor_factory.program.iterable_constants[i]))

    def test_arity_2_2_not_trainable_variable_variable(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = ["X", "Y"]
        atom = Atom("father", *value)
        correct = np.array([
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.701, 0.709,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.719, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.727],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.733, 0.0, 0.0, 0.739, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.743, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.751, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.761, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.769, 0.0, 0.0, 0.0,
             0.773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
        ])
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_2_not_trainable_variable_variable.
                __func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tf.sparse.to_dense(tensor))
        self.assertEqual(
            (tensor_factory.constant_size, tensor_factory.constant_size),
            evaluated.shape)
        for i in range(tensor_factory.constant_size):
            for j in range(tensor_factory.constant_size):
                self.assertAlmostEqual(
                    correct[i, j], evaluated[i, j], places=EQUAL_DELTA,
                    msg="Incorrect value for constants {}, {}: {}, {}".format(
                        i, j, tensor_factory.program.iterable_constants[i],
                        tensor_factory.program.iterable_constants[j]))

    # TODO: The trainables
    def test_arity_2_2_trainable_constant_constant(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = ["some_male", "some_female"]
        atom = Atom("uncle", *value, weight=0.049)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_2_trainable_constant_constant.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight, evaluated, places=EQUAL_DELTA)

    def test_arity_2_2_trainable_constant_iterable_constant(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = ["some_female", "charlotte"]
        atom = Atom("aunt", *value, weight=0.33)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_2_trainable_constant_iterable_constant.
                __func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight, evaluated, places=EQUAL_DELTA)

    def test_arity_2_2_trainable_constant_variable(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = ["some_female", "X"]
        atom = Atom("aunt", *value)
        correct = np.array([[0.21], [0.0], [0.0], [0.31], [0.33], [0.0], [0.0],
                            [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0],
                            [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]])
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_2_trainable_constant_variable.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((tensor_factory.constant_size, 1), evaluated.shape)
        for i in range(tensor_factory.constant_size):
            self.assertAlmostEqual(
                correct[i, 0], evaluated[i, 0], places=EQUAL_DELTA,
                msg="Incorrect value for constant {}: {}".format(
                    i, tensor_factory.program.iterable_constants[i]))

    def test_arity_2_2_trainable_iterable_constant_constant(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = ["jennifer", "some_male"]
        atom = Atom("aunt", *value, weight=0.0433)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_2_trainable_iterable_constant_constant.
                __func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight, evaluated, places=EQUAL_DELTA)

    def test_arity_2_2_trainable_iterable_constant_iterable_constant(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = ["jennifer", "charlotte"]
        atom = Atom("aunt", *value, weight=0.433)
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.
                arity_2_2_trainable_iterable_constant_iterable_constant.
                __func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((), evaluated.shape)
        self.assertAlmostEqual(atom.weight, evaluated, places=EQUAL_DELTA)

    def test_arity_2_2_trainable_iterable_constant_variable(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = ["alfonso", "X"]
        atom = Atom("nephew", *value)
        correct = np.array([[0.0], [0.0], [0.73], [0.079], [0.083], [0.0],
                            [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0],
                            [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]])
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_2_trainable_iterable_constant_variable.
                __func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((tensor_factory.constant_size, 1), evaluated.shape)
        for i in range(tensor_factory.constant_size):
            self.assertAlmostEqual(
                correct[i, 0], evaluated[i, 0], places=EQUAL_DELTA,
                msg="Incorrect value for constant {}: {}".format(
                    i, tensor_factory.program.iterable_constants[i]))

    def test_arity_2_2_variable_constant(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = ["X", "some_female"]
        atom = Atom("niece", *value)
        correct = np.array([[0.0], [0.0], [0.0113], [0.0], [0.0127], [0.0],
                            [0.0], [0.0], [0.0], [0.0], [0.0], [0.0107],
                            [0.0109], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0],
                            [0.0]])
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_2_trainable_variable_constant.__func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((tensor_factory.constant_size, 1), evaluated.shape)
        for i in range(tensor_factory.constant_size):
            self.assertAlmostEqual(
                correct[i, 0], evaluated[i, 0], places=EQUAL_DELTA,
                msg="Incorrect value for constant {}: {}".format(
                    i, tensor_factory.program.iterable_constants[i]))

    def test_arity_2_2_variable_iterable_constant(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = ["X", "jennifer"]
        atom = Atom("niece", *value)
        correct = np.array([[0.0], [0.0], [0.0131], [0.0], [0.113], [0.0],
                            [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0149],
                            [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]])
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_2_trainable_variable_iterable_constant.
                __func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual((tensor_factory.constant_size, 1), evaluated.shape)
        for i in range(tensor_factory.constant_size):
            self.assertAlmostEqual(
                correct[i, 0], evaluated[i, 0], places=EQUAL_DELTA,
                msg="Incorrect value for constant {}: {}".format(
                    i, tensor_factory.program.iterable_constants[i]))

    def test_arity_2_2_variable_variable(self):
        tensor_factory = self.tensor_factory  # type: TensorFactory
        value = ["X", "Y"]
        atom = Atom("nephew", *value)
        correct = np.array([
            [0.0, 0.0, 0.730, 0.079, 0.083, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.089, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.101,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
        ])
        key = tensor_factory.get_atom_key(atom)
        self.assertEqual(
            tensor_factory.arity_2_2_trainable_variable_variable.
                __func__,
            tensor_factory.function[key])
        tensor = tensor_factory.build_atom(atom)

        init = tf.compat.v1.global_variables_initializer()
        sess = tf.compat.v1.Session()
        sess.run(init)
        evaluated = sess.run(tensor)
        self.assertEqual(
            (tensor_factory.constant_size, tensor_factory.constant_size),
            evaluated.shape)
        for i in range(tensor_factory.constant_size):
            for j in range(tensor_factory.constant_size):
                self.assertAlmostEqual(
                    correct[i, j], evaluated[i, j], places=EQUAL_DELTA,
                    msg="Incorrect value for constants {}, {}: {}, {}".format(
                        i, j, tensor_factory.program.iterable_constants[i],
                        tensor_factory.program.iterable_constants[j]))

    # TODO: Put the test.py into test methods here.
    # TODO: for each test involving constants (or numbers), create new tests
    #  for constants (or numbers) not in the knowledge base.
    # TODO: test if the values of trainable iterable constants and trainable
    #  variables are pointing to the same variable.
    # TODO: for each test involving numbers, test with number constant and
    #  number variable.


if __name__ == '__main__':
    unittest.main()
